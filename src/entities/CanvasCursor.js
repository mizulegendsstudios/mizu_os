/**
 * CanvasCursor - Representa un cursor personalizado para UI en canvas
 */
class CanvasCursor {
    constructor(x = 0, y = 0, size = 20) {
        this.x = x;
        this.y = y;
        this.size = size;
        this.visible = true; // 游댠 PROPIDAD PARA VISIBILIDAD
    }

    /**
     * Renderiza el cursor en el contexto canvas
     * @param {CanvasRenderingContext2D} ctx - Contexto de renderizado
     */
    render(ctx) {
        // 游댠 NO RENDERIZAR SI NO ES VISIBLE
        if (!this.visible) return;
        
        // C칤rculo amarillo s칩lido
        ctx.fillStyle = '#ffff00';
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size / 2, 0, Math.PI * 2);
        ctx.fill();
        
        // Borde negro para mejor contraste
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 2;
        ctx.stroke();
        
        // Punto central para mejor precisi칩n
        ctx.fillStyle = '#000000';
        ctx.beginPath();
        ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
        ctx.fill();
    }

    /**
     * Actualiza la posici칩n del cursor
     * @param {number} x - Nueva posici칩n X
     * @param {number} y - Nueva posici칩n Y
     */
    setPosition(x, y) {
        this.x = x;
        this.y = y;
    }

    /**
     * Establece la visibilidad del cursor
     * @param {boolean} visible - Si el cursor es visible
     */
    setVisible(visible) {
        this.visible = visible;
    }

    /**
     * Verifica si el cursor est치 sobre un 치rea
     * @param {number} x - Posici칩n X del 치rea
     * @param {number} y - Posici칩n Y del 치rea
     * @param {number} width - Ancho del 치rea
     * @param {number} height - Alto del 치rea
     * @returns {boolean} True si el cursor est치 sobre el 치rea
     */
    isOver(x, y, width, height) {
        return this.x >= x && this.x <= x + width &&
               this.y >= y && this.y <= y + height;
    }
}

export default CanvasCursor;
